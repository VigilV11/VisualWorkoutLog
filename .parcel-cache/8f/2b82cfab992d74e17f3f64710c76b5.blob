var _leaflet = require('leaflet');
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
var _leafletDefault = _parcelHelpers.interopDefault(_leaflet);
require('core-js/stable');
require('regenerator-runtime/runtime');
var _constantsJs = require('./constants.js');
var _constants = require('./constants');
var _WorkoutData = require('./WorkoutData');
var _WorkoutDataDefault = _parcelHelpers.interopDefault(_WorkoutData);
// ++++++++++++++++  REQUIRED API KEYS ++++++++++++++++\\
// LOCATIONIQ_API_KEY in constants.js from https://locationiq.com/ for reverse geocoding
// MAPBOX_API_KEY in constants.js from https://www.mapbox.com/ for displaying the map
// ++++++++++++++++ SELECTING DOM NODES ++++++++++++++++\\
const workoutForm = document.querySelector('.workout-form-outbox');
const submitWorkoutForm = document.querySelector('form');
const workoutType = document.querySelector('.form-type');
const workoutDistance = document.querySelector('.form-distance');
const workoutDuration = document.querySelector('.form-duration');
const workoutCadence = document.querySelector('.form-cadence');
// ++++++++++++++++ ADD EVENT LISTENERS ++++++++++++++++\\
// Event listener to monitor form submission (Enter key)
submitWorkoutForm.addEventListener('submit', e => {
  e.preventDefault();
  console.log(workoutType.value);
  const workoutData = new _WorkoutDataDefault.default(workoutType.value, workoutDistance.value, workoutDuration.value, workoutCadence.value);
});
// ++++++++++++++++ PROMISIFYING GEOLOCATION API CALL ++++++++++++++++\\
const getPosition = function () {
  return new Promise((resolve, reject) => navigator.geolocation.getCurrentPosition(resolve, reject));
};
// ++++++++++++++++ DISPLAY MAP TO CURRENT POSITION ++++++++++++++++\\
const loadMap = async function () {
  const res = await getPosition();
  const {latitude: lat, longitude: lng} = res.coords;
  let mapObj = _leafletDefault.default.map('map').setView([lat, lng], 13);
  // second parameter is the map zoom level
  _leafletDefault.default.tileLayer(_constantsJs.mapAPIOpenStreetMap, _constantsJs.mapAttributionOpenStreetMap).addTo(mapObj);
  return mapObj;
};
// ++++++++++++++++ GET LOCATION DATA ++++++++++++++++\\
const getLocationData = async function (lat, lng) {
  const res = await fetch(`${_constants.locationDataAPI}&lat=${lat}&lon=${lng}`);
  const data = await res.json();
  return data.display_name;
};
// ++++++++++++++++ GET USER CLICK LOCATION ++++++++++++++++\\
const main = async function () {
  const myMap = await loadMap();
  myMap.on('click', onMapClick.bind(myMap));
};
async function onMapClick(e) {
  const myMap = this;
  const {latlng: {lat, lng}} = e;
  // const location = await getLocationData(lat, lng); // Get location data by reverse geocoding
  // let [mainAddress, ...remainingAddress] = location.split(','); // Display first part of address as heading (in bold)
  var marker = _leafletDefault.default.marker([lat, lng]).addTo(myMap);
  // Add marker to map
  // Show workout form
  workoutForm.classList.remove('hidden');
  // Customize popup modal
  const popupOptions = {
    maxWidth: 250,
    minWidth: 100,
    autoClose: false,
    closeOnClick: false,
    className: 'running-popup'
  };
  marker.bindPopup(_leafletDefault.default.popup(popupOptions)).setPopupContent().openPopup();
}
main();
